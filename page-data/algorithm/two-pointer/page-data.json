{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/algorithm/two-pointer/",
    "result": {"data":{"cur":{"id":"6ab29f10-679d-5334-b42f-5966a363a541","html":"<h2 id=\"투-포인터-알고리즘이란\" style=\"position:relative;\"><a href=\"#%ED%88%AC-%ED%8F%AC%EC%9D%B8%ED%84%B0-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%B4%EB%9E%80\" aria-label=\"투 포인터 알고리즘이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>투 포인터 알고리즘이란?</h2>\n<p>투 포인터 알고리즘은 배열이나 리스트에서 두 개의 포인터를 조작하여 원하는 결과를 얻는 데 사용되는 알고리즘이다. 이 알고리즘은 일반적으로 정렬된 배열에서 특정한 합이나 조건을 만족하는 부분 배열을 찾거나, 두 배열을 병합하는 경우에 효과적으로 사용된다.<br>\n투 포인터 알고리즘의 주요 아이디어는 두 개의 포인터를 사용하여 배열 내에서 움직이면서 원하는 조건을 찾아내는 것이다. 보통 시작점과 끝점을 나타내는 두 포인터를 사용하며, 이 두 포인터는 배열을 훑으면서 조건에 맞게 이동한다.</p>\n<h2 id=\"투-포인터-알고리즘-예시\" style=\"position:relative;\"><a href=\"#%ED%88%AC-%ED%8F%AC%EC%9D%B8%ED%84%B0-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%98%88%EC%8B%9C\" aria-label=\"투 포인터 알고리즘 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>투 포인터 알고리즘 예시</h2>\n<p>간단한 예제로 정렬된 배열 내에서 두 수 사이의 합이 특정 값이 되는 경우(부분수열)를 찾는 예시이다.</p>\n<ol>\n<li>시작과 끝 포인터 초기화: 배열의 시작지점에 시작과 끝 포인터를 놓는다.</li>\n<li>포인터 이동: 포인터가 가리키는 두 수 사이의 합을 목표값과 비교한다.</li>\n</ol>\n<ul>\n<li>합이 목표 값보다 작으면 끝 포인터를 오른쪽으로 옮긴다.</li>\n<li>합이 목표 값보다 크면 시작 포인터를 오른쪽으로 이동한다.</li>\n<li>합이 목표 값과 같으면 원하는 조건을 찾은 것이다.</li>\n</ul>\n<p>프로그래머스(<a href=\"https://www.programmers.co.kr)%EC%9D%98\">https://www.programmers.co.kr)의</a> level2 연속된 부분 수열의 합 문제로 간단한 코드 예시를 들어보면,</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">sequence<span class=\"token punctuation\">,</span> k</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 시작 포인터 초기화</span>\n    <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> end <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> end <span class=\"token operator\">&lt;</span> sequence<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> end<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 끝 포인터 초기화 및 반복문 시작</span>\n        sum <span class=\"token operator\">+=</span> sequence<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 끝 포인터에 해당하는 값을 더해준다.</span>\n        \n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>sum <span class=\"token operator\">></span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 시작 포인터와 끝 포인터 사이의 부분수열의 합이 k보다 큰 경우</span>\n            sum <span class=\"token operator\">-=</span> sequence<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 시작 포인터의 값을 합에서 제외한다.</span>\n            start <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 시작 포인터를 오른쪽으로 옮긴다.</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sum <span class=\"token operator\">===</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 합이 k와 같을 경우 조건에 만족한다.</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 기존에 조건을 만족하는 부분 수열이 존재하는 경우</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>answer<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> answer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 기존 부분 수열보다 현재 부분 수열의 길이가 더 짧을 경우</span>\n                    answer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 현재 부분 수열로 바꿔준다.</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                answer <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 기존에 조건을 만족하는 부분 수열이 존재하지 않을 경우 현재 부분수열을 바로 대입해준다.</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>와 같이 코드를 작성할 수 있다.</p>\n<p><br /><br /><br /></p>","excerpt":"투 포인터 알고리즘이란? 투 포인터 알고리즘은 배열이나 리스트에서 두 개의 포인터를 조작하여 원하는 결과를 얻는 데 사용되는 알고리즘이다. 이 알고리즘은 일반적으로 정렬된 배열에서 특정한 합이나 조건을 만족하는 부분 배열을 찾거나, 두 배열을 병합하는 경우에 효과적으로 사용된다. 투 포인터 알고리즘의 주요 아이디어는 두 개의 포인터를 사용하여 배열 내에서 움직이면서 원하는 조건을 찾아내는 것이다. 보통 시작점과 끝점을 나타내는 두 포인터를 사용하며, 이 두 포인터는 배열을 훑으면서 조건에 맞게 이동한다. 투 포인터 알고리즘 예시 간단한 예제로 정렬된 배열 내에서 두 수 사이의 합이 특정 값이 되는 경우(부분수열)를 찾는 예시이다. 시작과 끝 포인터 초기화: 배열의 시작지점에 시작과 끝 포인터를 놓는다. 포인터 이동: 포인터가 가리키는 두 수 사이의 합을 목표값과 비교한다. 합이 목표 값보다 작으면 끝 포인터를 오른쪽으로 옮긴다. 합이 목표 값보다 크면 시작 포인터를 오른쪽으로 이동…","frontmatter":{"date":"December 07, 2023","title":"투 포인터 알고리즘(Two Pointer Algorithm)","categories":"tech-interview algorithm","author":"펀코딩","emoji":"🔍"},"fields":{"slug":"/algorithm/two-pointer/"}},"next":{"id":"ab4a1336-a865-5cae-a246-9ed4a6b743b7","html":"<h2 id=\"flutter\" style=\"position:relative;\"><a href=\"#flutter\" aria-label=\"flutter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Flutter?</h2>\n<br />\n<p>유튜브 영상을 보다 Flame 이라는 게임엔진을 이용하여 개발한 모바일 게임이 눈에 띄었다.<br /> Flame이 뭘까? 궁금해서 검색해보니</p>\n<blockquote>\n<p>Flame은 Flutter 기반 2D 게임엔진이라고 한다. (3D도 준비중이라고 하는데 지금은 정확히 모르겠다.)</p>\n</blockquote>\n<p><br />그렇다면, Flutter는 무엇일까?</p>\n<blockquote>\n<p>Flutter는 Google에서 개발한 크로스 플랫폼 모바일 앱 개발 프레임워크이다.</p>\n</blockquote>\n<p>React Native처럼 하나의 프레임워크로 IOS, Android 둘 다 개발이 가능한 모양이다.<br />\n앱 개발 전공이 아닌 나같은 경우(취미로 개발할 경우)에는 CrossPlatform 프레임워크를 사용하여 가볍게 시작하기에 좋을 것 같다! 물론 Flutter나 React Native를 사용한다고 Native를 아예 사용하지 않는 것은 아니라고 한다.<del>(Native는 어려워…)</del> <br /><br />\n그럼, Flutter와 React Native 와 비교했을 때 Flutter의 장점은 무엇이 있을까?</p>\n<ol>\n<li>React Native에 비해 성능적인 면에서 우수하다고 한다. (Flutter를 좋아하는 분들이 가장 많이 내세우시는 장점인듯?)</li>\n<li>React Native의 경우 머터리얼 디자인을 적용할 시 시스템에 있는 그래픽 라이브러리로 동작하기에 IOS, Android 위젯의 스타일이 달라 보일 수 있다고 한다. 반면에 Flutter는 SKIA라는 자체 엔진을 탑재하여 그래픽 라이브러리가 OS 종속성을 갖고 있지 않아 IOS, Android 모두 같은 스타일로 보여준다고 한다. (이거 꽤나 큰 장점인 것 같다…)</li>\n<li>핫 리로딩 지원</li>\n</ol>\n<p>많은 장점들이 있지만 단점도 분명 존재할 텐데… 한번 검색해보자</p>\n<ol>\n<li>RN(React Native)보다 성능적인 면에서는 우수하나, 생태계가 크지 않고 많은 issue들이 올라와 있다고 한다.</li>\n<li>개인적인 측면이긴한데 React 개발자인 나에게는 Dart라는 언어를 새로 배워야 한다는 단점…</li>\n</ol>\n<p><br />이 외에 많은 장점들이나 단점들, 다른 크로스 플랫폼 모바일 앱 개발 프레임워크와의 차이점들이 많지만… 여러 글들을 읽어본 결과 Flutter를 한번 사용해보고 싶다는 생각이 들어 Flutter를 직접 사용해볼 계획이다.</p>\n<p><br /><br /><br /></p>","frontmatter":{"date":"February 02, 2023","title":"Flutter (플러터)","categories":"moblie flutter","author":"Covy","emoji":"🔍"},"fields":{"slug":"/mobile/flutter/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://eungbin.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/algorithm/two-pointer/","nextSlug":"/mobile/flutter/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}