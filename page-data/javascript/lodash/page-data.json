{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/javascript/lodash/",
    "result": {"data":{"cur":{"id":"a512d27b-1796-5165-b758-a6c240de0e25","html":"<h2 id=\"lodash란\" style=\"position:relative;\"><a href=\"#lodash%EB%9E%80\" aria-label=\"lodash란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lodash란?</h2>\n<p>함수형 프로그래밍 패러다임을 사용하여 일반적인 프로그래밍 작업을 위한 유틸리티 기능을 제공하는 Javascript 라이브러리(Wikipedia)</p>\n<h2 id=\"debounce와-throttle\" style=\"position:relative;\"><a href=\"#debounce%EC%99%80-throttle\" aria-label=\"debounce와 throttle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>debounce와 throttle</h2>\n<p>debounce와 throttle은 이벤트가 연속적으로 발생할 때, 콜백함수의 불필요한 실행을 줄여주는 기능을 제공한다. 서버로의 불필요한 요청(Request)을 줄일 수 있고, 불필요한 렌더링을 방지할 수 있어 컴포넌트 성능 개선에 도움이 된다. 또한, 외부 API를 호출해야 하는 경우, 과도한 서버 요청을 막아줄 수 있는 면에서 아주 중요한 기능을 한다고 생각한다.</p>\n<p>debounce는 이벤트가 종료된 뒤, 일정 시간 뒤에 콜백함수가 실행된다. throttle은 콜백 함수를 일정 주기마다 한 번 실행한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">_<span class=\"token punctuation\">.</span><span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>wait<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>options<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascipt\"><pre class=\"language-javascipt\"><code class=\"language-javascipt\">_.throttle(func, [wait=0], [options={}])</code></pre></div>\n<p><br /><br /></p>\n<h3 id=\"debounce-적용-예시\" style=\"position:relative;\"><a href=\"#debounce-%EC%A0%81%EC%9A%A9-%EC%98%88%EC%8B%9C\" aria-label=\"debounce 적용 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>debounce 적용 예시</h3>\n<p><img src=\"https://user-images.githubusercontent.com/50731733/168414844-c97ae2dd-9c31-4a94-821f-9f8150173930.gif\" alt=\"beforeDebounce\"></p>\n<p><img src=\"https://user-images.githubusercontent.com/50731733/168414968-8ce3c1a9-2115-4d82-b4fa-f345fef6f303.gif\" alt=\"afterDebounce\"></p>\n<p><br /><br /><br /></p>","excerpt":"Lodash란? 함수형 프로그래밍 패러다임을 사용하여 일반적인 프로그래밍 작업을 위한 유틸리티 기능을 제공하는 Javascript 라이브러리(Wikipedia) debounce와 throttle debounce와 throttle은 이벤트가 연속적으로 발생할 때, 콜백함수의 불필요한 실행을 줄여주는 기능을 제공한다. 서버로의 불필요한 요청(Request)을 줄일 수 있고, 불필요한 렌더링을 방지할 수 있어 컴포넌트 성능 개선에 도움이 된다. 또한, 외부 API를 호출해야 하는 경우, 과도한 서버 요청을 막아줄 수 있는 면에서 아주 중요한 기능을 한다고 생각한다. debounce는 이벤트가 종료된 뒤, 일정 시간 뒤에 콜백함수가 실행된다. throttle은 콜백 함수를 일정 주기마다 한 번 실행한다.  debounce 적용 예시 beforeDebounce afterDebounce","frontmatter":{"date":"May 14, 2022","title":"컴포넌트 성능 향상(Javascript Lodash)","categories":"tech-interview javascript react","author":"Covy","emoji":"🔍"},"fields":{"slug":"/javascript/lodash/"}},"next":{"id":"3260811c-9076-5608-9751-3798a6035aae","html":"<h2 id=\"웹-브라우저의-동작-순서\" style=\"position:relative;\"><a href=\"#%EC%9B%B9-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%9D%98-%EB%8F%99%EC%9E%91-%EC%88%9C%EC%84%9C\" aria-label=\"웹 브라우저의 동작 순서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹 브라우저의 동작 순서</h2>\n<ol>\n<li>사용자가 브라우저에 도메인 입력(ex. <a href=\"https://www.naver.com\">https://www.naver.com</a>)</li>\n<li>웹 브라우저는 DNS에 입력된 도메인의 IP 주소를 요청</li>\n<li>해당 IP주소에 해당하는 서버로 접근(이때, random sequence 번호를 가지고 접근)</li>\n<li>서버에서 브라우저에 번호에 1을 더하여 응답(random sequence + 1)</li>\n<li>브라우저에서 다시 서버에 1을 더하여 응답</li>\n<li>(3, 4, 5 과정을 3 Way-Handshake 라고 한다. 브라우저가 서버에게 자신의 존재를 알리고 -> 서버는 브라우저의 존재를 확인했다는 사실 + 자신의 존재를 알리는 신호를 브라우저에 보냄 -> 브라우저는 서버의 존재를 확인했다는 신호를 서버에 다시 보냄 ===> 위 세 과정을 통해 브라우저와 서버간의 TCP 연결이 성립된다.)</li>\n</ol>\n<h2 id=\"브라우저-렌더링-과정\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EB%A0%8C%EB%8D%94%EB%A7%81-%EA%B3%BC%EC%A0%95\" aria-label=\"브라우저 렌더링 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브라우저 렌더링 과정</h2>\n<p><br /><br /><br /></p>\n<p>Refference <br />\r\n<a href=\"https://www.youtube.com/watch?v=FQHNg9gCWpg\">\r\n웹 브라우저의 동작 순서(유튜브)\r\n</a></p>","frontmatter":{"date":"May 03, 2022","title":"Web 브라우저의 동작 순서","categories":"tech-interview web","author":"Covy","emoji":"🔍"},"fields":{"slug":"/web/browser/"}},"prev":{"id":"5fdd06e2-4f9d-55b5-8b75-2799f2d783e5","html":"<h2 id=\"flutter\" style=\"position:relative;\"><a href=\"#flutter\" aria-label=\"flutter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Flutter?</h2>\n<br />\n<p>유튜브 영상을 보다 Flame 이라는 게임엔진을 이용하여 개발한 모바일 게임이 눈에 띄었다.<br /> Flame이 뭘까? 궁금해서 검색해보니</p>\n<blockquote>\n<p>Flame은 Flutter 기반 2D 게임엔진이라고 한다. (3D도 준비중이라고 하는데 지금은 정확히 모르겠다.)</p>\n</blockquote>\n<p><br />그렇다면, Flutter는 무엇일까?</p>\n<blockquote>\n<p>Flutter는 Google에서 개발한 크로스 플랫폼 모바일 앱 개발 프레임워크이다.</p>\n</blockquote>\n<p>React Native처럼 하나의 프레임워크로 IOS, Android 둘 다 개발이 가능한 모양이다.<br />\r\n앱 개발 전공이 아닌 나같은 경우(취미로 개발할 경우)에는 CrossPlatform 프레임워크를 사용하여 가볍게 시작하기에 좋을 것 같다! 물론 Flutter나 React Native를 사용한다고 Native를 아예 사용하지 않는 것은 아니라고 한다.<del>(Native는 어려워…)</del> <br /><br />\r\n그럼, Flutter와 React Native 와 비교했을 때 Flutter의 장점은 무엇이 있을까?</p>\n<ol>\n<li>React Native에 비해 성능적인 면에서 우수하다고 한다. (Flutter를 좋아하는 분들이 가장 많이 내세우시는 장점인듯?)</li>\n<li>React Native의 경우 머터리얼 디자인을 적용할 시 시스템에 있는 그래픽 라이브러리로 동작하기에 IOS, Android 위젯의 스타일이 달라 보일 수 있다고 한다. 반면에 Flutter는 SKIA라는 자체 엔진을 탑재하여 그래픽 라이브러리가 OS 종속성을 갖고 있지 않아 IOS, Android 모두 같은 스타일로 보여준다고 한다. (이거 꽤나 큰 장점인 것 같다…)</li>\n<li>핫 리로딩 지원</li>\n</ol>\n<p>많은 장점들이 있지만 단점도 분명 존재할 텐데… 한번 검색해보자</p>\n<ol>\n<li>RN(React Native)보다 성능적인 면에서는 우수하나, 생태계가 크지 않고 많은 issue들이 올라와 있다고 한다.</li>\n<li>개인적인 측면이긴한데 React 개발자인 나에게는 Dart라는 언어를 새로 배워야 한다는 단점…</li>\n</ol>\n<p><br />이 외에 많은 장점들이나 단점들, 다른 크로스 플랫폼 모바일 앱 개발 프레임워크와의 차이점들이 많지만… 여러 글들을 읽어본 결과 Flutter를 한번 사용해보고 싶다는 생각이 들어 Flutter를 직접 사용해볼 계획이다.</p>\n<p><br /><br /><br /></p>","frontmatter":{"date":"February 02, 2023","title":"Flutter (플러터)","categories":"moblie flutter","author":"Covy","emoji":"🔍"},"fields":{"slug":"/mobile/flutter/"}},"site":{"siteMetadata":{"siteUrl":"https://eungbin.github.io","comments":{"utterances":{"repo":""}}}}},"pageContext":{"slug":"/javascript/lodash/","nextSlug":"/web/browser/","prevSlug":"/mobile/flutter/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}