{
    "componentChunkName": "component---src-pages-index-js",
    "path": "/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"9abf1159-26c8-5e86-8056-9100ab7e11f4","excerpt":"Web Storage HTML5에는 웹의 데이터를 클라이언트에 저장할 수 있는 새로운 자료구조인 Web Storage 스펙이 포함되어 있다. \nWeb Storage의 개념은 key/value 쌍으로 데이터를 저장하고 key를 기반으로 데이터를 조회하는 패턴이다. \n영구저장소(LocalStorage)와 임시저장소(SessionStorage)를 따로 두어 데이터의 지속성을 구분할 수 있어 환경에 맞게 선택이 가능하다.  Web Storage는 기존 Cookie와 매우 유사한 개념이다. \n몇 가지 쿠키의 단점을 보완하기 위해 도입되었다.  Web Storage와 Cookie의 차이점 쿠키는 매번 서버로 전송된다. 웹사이트에서 쿠키를 설정하면 이후 모든 웹 요청은 쿠키정보를 포함하여 서버로 전송된다. 단순 문자열을 넘어 객체정보를 저장할 수 있다. 문자열 기반 데이터이 외에 구조화된 객체를 저장할 수 있다. 제한 용량이 쿠키에 비해 자유롭다. 쿠키는 개수와 용량에 제한이 있다. 하나의 사…","frontmatter":{"categories":"tech-interview web","title":"LocalStorage, SessionStorage, Cookie","date":"December 22, 2021"},"fields":{"slug":"/web/storage/"}}},{"node":{"id":"e41b2e1e-7ed8-5d5f-b003-ab158ec4f7a2","excerpt":"Side Effect 란? React 컴포넌트가 화면에 1차로 렌더링된 이후에 비동기로 처리되어야 하는 부수적인 효과들   비동기로 처리되어야 하는 이유? 데이터를 가져오려고 외부 API를 호출할 때, 일단 화면에 렌더링할 수 있는 것은 1차로 렌더링하고 실제 데이터는 비동기로 가져오는 것이 권장된다. 이유는 연동된 API가 응답이 늦거나 없을 때 데미지(사용자의 답답함)를 최소화 시켜 사용자 경험 측면에서 유리하기 때문이다.   React Hooks 란? Hooks는 리액트 v16.8에 새로 도입된 기능이다. 함수형태의 컴포넌트에서 사용되는 몇가시 기술을 Hook이라고 부른다. 함수형 컴포넌트에서도 상태 관리를 할 수 있는 useState, 그리고 렌더링 직후 작업을 설정하는 useEffect 등의 기능을 제공한다.   잘 사용하고 있던 클래스형 컴포넌트에서 함수형 컴포넌트로 바꾸는 이유? React를 배우는 데 있어서 클래스는 큰 진입장벽이었다. 코드의 재사용성과 코드 구성을 …","frontmatter":{"categories":"tech-interview react","title":"React Hook","date":"December 15, 2021"},"fields":{"slug":"/react/hook/"}}},{"node":{"id":"e31bf901-483a-554c-9e00-7a674be8a3c5","excerpt":"Webpack(웹팩) 이란? 현대 Javascript Application의 Static Module Bundler 필요한 다수의 자바스크립트 파일을 하나의 자바스크립트 파일로 만들어 주는 것을 말한다.   Bundle(번들) 이란? 소프트웨어 및 일부 하드웨어와 함께 작동하는 데 필요한 모든 것을 포함하는 Package   Webpack을 사용하는 이유 연관되어 있는 자바스크립트 파일들을 하나의 파일로 묶어줘서 관리하기 편하다. 컴파일할 때, 여러 모듈들의 파일을 읽어오는데 걸리는 시간을 해결하기 위해 여러 파일을 하나의 파일로 번들링 해준다. 하나의 자바스크립트 파일로 만들어서 웹페이지 성능을 최적화 해준다. 다른 Module Bundler도 많이 존재하지만, performance가 우수하다.   Babel(바벨) 이란? ES6+ 버전 이상의 자바스크립트나 JSX, 타입스크립트 코드를 하위 버전의 자바스크립트 코드로 변환 시켜 IE나 다른 브라우저 내에서 동작할 수 있도록 하는…","frontmatter":{"categories":"tech-interview javascript web","title":"Webpack(웹팩)","date":"December 12, 2021"},"fields":{"slug":"/javascript/webpack/"}}},{"node":{"id":"95cbca88-e5e4-5a35-8865-5fa44d0e4148","excerpt":"GET 이란? GET은 지정된 리소스에서 데이터를 요청하는데 사용되는 HTTP Method   GET 요청의 특징 Browser history에 남아있다. 북마크가 가능하다. 민감한 데이터를 처리할 때 GET을 사용하지 않는다. (보안) 데이터 요청에만 사용된다. POST 란? 리소스를 생성/업데이트하기 위해 서버에 데이터를 보내는 데 사용된다.   POST 요청의 특징 Browser history에 남아있지 않는다. 북마크 불가능 데이터 길이에 대한 제한이 없다. 궁금증 Browser history가 무엇일까? (개발할 때 사용하던 history가 이 history인가?) 북마크가 무엇일까? 흔히들 사용하는 북마크기능을 말하는 것일까? POST 요청은 데이터 길이에 제한이 없다고 하는데 아예 없는 것일까? (vs GET에 비해 비교적 프리한 것인가?) 궁금한건 직접 해봐야지 Refference: https://www.w3schools.com/tags/ref_httpmethods.…","frontmatter":{"categories":"tech-interview web","title":"GET과 POST","date":"December 10, 2021"},"fields":{"slug":"/web/getPost/"}}},{"node":{"id":"f174326e-08ec-5066-8909-6bf2262d5e02","excerpt":"프로세스(Process) 란? 운영체제로부터 자원을 할당받은 작업의 단위 프로그램이 메모리에 적재된 상태 스레드(Thread) 란? 프로세스가 할당받은 자원을 이용하는 실행의 흐름 단위 프로그램 > 프로세스 > 스레드 프로세스와 스레드의 차이 프로세스는 프로그램을 실행하는 순간 해당 파일이 컴퓨터 메모리에 적재되고, 이 동적인 상태의 프로그램을 프로세스라고 함. 스레드는 프로세스를 구성하는 더 작은 실행 단위의 개념 프로세스는 메모리에 적재될 때 운영체제로부터 독자적인 시스템 자원을 할당받는 반면, 스레드는 프로세스 내부에서 다른 메모리 영역을 같은 프로세스 내 다른 스레드와 공유한다.","frontmatter":{"categories":"tech-interview cs","title":"Process와 Thread","date":"December 02, 2021"},"fields":{"slug":"/cs/process-thread/"}}},{"node":{"id":"64dd703f-65b3-5823-b606-461da32271c9","excerpt":"Javscript Closure(클로저)란? 독립적인 변수를 가리키는 함수 클로저의 원리 함수A가 존재하고, 함수 A에서 선언된 1이라는 변수가 존재, 또한 함수 A 내부에 B라는 내부함수가 존재하고 B라는 내부함수에서 A함수에서 선언된 1이라는 변수를 참조, 이때 내부함수 B가 외부로 전달될 경우, A의 실행이 종료되어도 변수 1이 사라지지 않는다. ~~A의 실행이 종료되어도 변수 1이 사라지지 않는다 -> 사이드 이펙트 실행이 종료되어도 사라지지 않는다는 것은 메모리에 계속 남아있음을 뜻하고 이는 메모리 누수 현상이 발생할 수 있음을 뜻함 또한 메모리에 계속 남아있기에 필요에 의해 참조가 가능 메모리 누수란? 프로그램이 필요하지 않은 메모리를 계속 점유하고 있는 현상 클로저를 사용하는 이유 불필요한 전역변수의 선언을 막아준다. private 변수를 사용하고 싶을 때 이용된다. 클로저 사용의 단점 메모리 누수 현상이 발생할 수 있다. 새로운 Scope를 생성하여 내부 함수에 링크…","frontmatter":{"categories":"tech-interview javascript","title":"Javascript Closure(클로저)","date":"November 29, 2021"},"fields":{"slug":"/javascript/closure/"}}},{"node":{"id":"be0c4600-f669-5100-8e44-c4a32320a50d","excerpt":"Javscript Hoisting(호이스팅) 이란? 함수 안에 있는 선언들을 모두 끌어올려서 해당 함수 유효범위의 최상단에 선언하는 것 변수의 경우 var로 선언한 변수만 호이스팅이 적용된다. (let, const 변수는 적용되지 않음) 예시 적용 전 적용 후 또한, 함수에서는 함수 선언문은 호이스팅이 적용되고, 함수 표현식은 적용되지 않는다. 예시 적용 전 적용 후 Hoisting 적용 우선순위 변수 선언문이 함수 선언문보다 위로 끌어올려진다.","frontmatter":{"categories":"tech-interview javascript","title":"Javascript Hoisting(호이스팅)","date":"November 27, 2021"},"fields":{"slug":"/javascript/hoisting/"}}}]},"site":{"siteMetadata":{"language":"ko","author":{"name":"김응빈","bio":{"role":"개발자","description":["사람에 가치를 두는","능동적으로 일하는","즐기며 개발하는"],"thumbnail":"sample.png"},"social":{"github":"https://github.com/eungbin","linkedIn":"","email":"programmer97@naver.com"}}}}},"pageContext":{}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437","3350743975"]}