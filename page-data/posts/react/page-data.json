{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/react",
    "result": {"pageContext":{"currentCategory":"react","categories":["All","tech-interview","algorithm","moblie","flutter","javascript","react","web","cs"],"edges":[{"node":{"id":"53a42d67-03a1-5858-b429-d49febee7fd3","excerpt":"Lodash란? 함수형 프로그래밍 패러다임을 사용하여 일반적인 프로그래밍 작업을 위한 유틸리티 기능을 제공하는 Javascript 라이브러리(Wikipedia) debounce와 throttle debounce와 throttle은 이벤트가 연속적으로 발생할 때, 콜백함수의 불필요한 실행을 줄여주는 기능을 제공한다. 서버로의 불필요한 요청(Request)을 줄일 수 있고, 불필요한 렌더링을 방지할 수 있어 컴포넌트 성능 개선에 도움이 된다. 또한, 외부 API를 호출해야 하는 경우, 과도한 서버 요청을 막아줄 수 있는 면에서 아주 중요한 기능을 한다고 생각한다. debounce는 이벤트가 종료된 뒤, 일정 시간 뒤에 콜백함수가 실행된다. throttle은 콜백 함수를 일정 주기마다 한 번 실행한다.  debounce 적용 예시 beforeDebounce afterDebounce","fields":{"slug":"/javascript/lodash/"},"frontmatter":{"categories":"tech-interview javascript react","title":"컴포넌트 성능 향상(Javascript Lodash)","date":"May 14, 2022"}},"next":{"fields":{"slug":"/web/browser/"}},"previous":{"fields":{"slug":"/mobile/flutter/"}}},{"node":{"id":"e41b2e1e-7ed8-5d5f-b003-ab158ec4f7a2","excerpt":"Side Effect 란? React 컴포넌트가 화면에 1차로 렌더링된 이후에 비동기로 처리되어야 하는 부수적인 효과들   비동기로 처리되어야 하는 이유? 데이터를 가져오려고 외부 API를 호출할 때, 일단 화면에 렌더링할 수 있는 것은 1차로 렌더링하고 실제 데이터는 비동기로 가져오는 것이 권장된다. 이유는 연동된 API가 응답이 늦거나 없을 때 데미지(사용자의 답답함)를 최소화 시켜 사용자 경험 측면에서 유리하기 때문이다.   React Hooks 란? Hooks는 리액트 v16.8에 새로 도입된 기능이다. 함수형태의 컴포넌트에서 사용되는 몇가시 기술을 Hook이라고 부른다. 함수형 컴포넌트에서도 상태 관리를 할 수 있는 useState, 그리고 렌더링 직후 작업을 설정하는 useEffect 등의 기능을 제공한다.   잘 사용하고 있던 클래스형 컴포넌트에서 함수형 컴포넌트로 바꾸는 이유? React를 배우는 데 있어서 클래스는 큰 진입장벽이었다. 코드의 재사용성과 코드 구성을 …","fields":{"slug":"/react/hook/"},"frontmatter":{"categories":"tech-interview react","title":"React Hook","date":"December 15, 2021"}},"next":{"fields":{"slug":"/javascript/webpack/"}},"previous":{"fields":{"slug":"/web/storage/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}